---
const { kits } = Astro.props;

const currencies = kits.reduce((allCurrencies, kit) => {
  Object.keys(kit.price).forEach((currency) => {
    if (!allCurrencies.includes(currency)) {
      allCurrencies.push(currency);
    }
  });
  return allCurrencies;
}, []);

function currencyWithSymbol(currency) {
  let currencyWithSymbol = currency;
  switch (currency) {
    case "USD":
      currencyWithSymbol = "$" + currency;
      break;
    case "CAD":
      currencyWithSymbol = "$" + currency;
      break;
    case "EUR":
      currencyWithSymbol = "€" + currency;
      break;
    case "GBP":
      currencyWithSymbol = "£" + currency;
      break;
    case "CNY":
      currencyWithSymbol = "¥" + currency;
      break;
    case "PHP":
      currencyWithSymbol = "₱" + currency;
      break;
    case "CLP":
      currencyWithSymbol = "$" + currency;
      break;
    case "AUD":
      currencyWithSymbol = "$" + currency;
      break;
  }

  return currencyWithSymbol;
}
---

<div class="table-wrapper">
  <table class="text-base">
    <thead>
      <tr>
        <th>Name</th>
        {
          currencies.map((currency) => {
            return (
              <th class="text-align-right">{currencyWithSymbol(currency)}</th>
            );
          })
        }
      </tr>
    </thead>
    <tbody>
      {
        kits.map((kit) => {
          return (
            <tr>
              <td>{kit.name}</td>
              {currencies.map((currency) => {
                return <td class="table-data">{kit.price[currency]}</td>;
              })}
            </tr>
          );
        })
      }
    </tbody>
  </table>
</div>
<style>
  .table-wrapper {
    width: 100%;
    overflow-x: auto;
  }
  table {
    border-collapse: collapse;
  }
  td,
  th {
    border: 1px solid #dddddd;
    text-align: left;
    padding: 8px;
  }

  tr:nth-child(even) {
    background-color: #eaeaea;
  }
  .table-data {
    padding-left: 1rem;
    text-align: right;
  }
</style>
