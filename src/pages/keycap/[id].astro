---
import Layout from "../../layouts/Layout.astro";
import ImageCarousel from "../../components/ImageCarousel.jsx";
import ImageCarouselExtras from "../../components/ImageCarouselExtras.jsx";
import KeycapButtons from "../../components/KeycapButtons.jsx";
import PriceTable from "../../components/PriceTable.astro";
import ColorBlock from "../../components/ColorBlock.astro";
import { getCollection } from "astro:content";
//import { themeDynamic } from "../../stores/themeStore";
export async function getStaticPaths() {
  const keycaps = await getCollection("gmk");
  return keycaps.map((item) => {
    return {
      params: { id: item.id },
      props: { item },
    };
  });
}

const { item } = Astro.props;
// const currentThemeDynamic = themeDynamic.get();
// console.log("HERE2:", themeDynamic.get());
// console.log("HERE2:", currentThemeDynamic);
function formatToDateWord(isoDate) {
  const newDate = new Date(isoDate);
  const options = { year: "numeric", month: "long" };
  return newDate.toLocaleDateString(undefined, options);
}
---

<Layout title="Keycap demo">
  <main class="keycap-info-wrapper">
    <section class="keycap-info-container">
      <div class="keycap-carousel-container">
        <ImageCarousel client:load kits={item.data.kits} id={item.id} />
      </div>
      <div class="keycap-main-info-container">
        <div>
          <h2 class="text-3xl">
            {item.data.manufacturer + " " + item.data.title}
          </h2>
          <div class="keycap-tags-container">
            <div>
              <p class="text-small text-bold">Designed by</p>
              <p class="text-small">{item.data.designer}</p>
            </div>
            <div>
              <p class="text-small text-bold">Group buy</p>
              <p class="text-small">
                {formatToDateWord(item.data.dates.groupBuy)}
              </p>
            </div>
            <div>
              <p class="text-small text-bold">Shipped</p>
              <p class="text-small">
                {formatToDateWord(item.data.dates.shipped)}
              </p>
            </div>
          </div>
        </div>
        <p class="text-base">{item.data.description}</p>
        <div>
          <h3 class="text-xl">Kits</h3>
          <KeycapButtons client:load kits={item.data.kits} />
        </div>

        <div>
          <h3 class="text-xl">Colors</h3>
          <ColorBlock colors={item.data.colors} />
        </div>

        <div>
          <h3 class="text-xl">Pricing</h3>
          {
            Object.keys(item.data.kits[0].price).length !== 0 ? (
              <PriceTable kits={item.data.kits} />
            ) : (
              <p class="text-base">No pricing available.</p>
            )
          }
        </div>
      </div>
    </section>
    <section class="keycap-extras-container">
      {
        item.data.deskmats.length !== 0 && (
          <div>
            <h3 class="text-xl">Deskmats</h3>
            <ImageCarouselExtras
              client:load
              extras={item.data.deskmats}
              element="deskmats"
            />
          </div>
        )
      }
      {
        item.data.renders.length !== 0 && (
          <div>
            <h3 class="text-xl">Renders</h3>
            <ImageCarouselExtras
              client:load
              extras={item.data.renders}
              element="renders"
            />
          </div>
        )
      }
      {
        item.data.collabs.length !== 0 && (
          <div>
            <h3 class="text-xl">Collabs</h3>
            <ImageCarouselExtras
              client:load
              extras={item.data.collabs}
              element="collabs"
            />
          </div>
        )
      }
    </section>
    <section class="reference-container">
      <p>Reference:</p>
      <a href={item.data.groupBuyLink} class="reference-link">Link</a>
    </section>
  </main>
</Layout>
<style>
  /* body {
    background-color: #fcafc0;
    color: #f7f2ea;
  } */
  .keycap-info-wrapper {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  .keycap-tags-container {
    display: flex;
    gap: 2rem;
    color: grey;
  }

  .keycap-info-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .keycap-main-info-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    flex: 1;
  }

  .keycap-carousel-container {
    display: flex;
    justify-content: center;
  }

  /* EXTRAS */
  .keycap-extras-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  /* REFERENCE */
  .reference-container {
    display: flex;
    font-size: 1rem;
    gap: 0.25rem;
  }
  .reference-link {
    color: blue;
    /* text-decoration: underline; */
  }

  @media (min-width: 768px) {
    .keycap-info-container {
      display: grid;
      grid-template-columns: repeat(2, minmax(0, 1fr));
    }

    .keycap-extras-container {
      display: grid;
      grid-template-columns: repeat(3, minmax(0, 1fr));
    }

    .keycap-carousel-container {
      order: 1;
    }
  }
</style>

<!-- <script is:inline define:vars={{ item, currentThemeDynamic }}>
//If set to dynamic
console.log("HERE: ", currentThemeDynamic);

document.body.style.backgroundColor = item.data.colors[0].color.hex;
document.body.style.color = item.data.colors[1].color.hex;

const keycapTagsContainer = document.querySelector(".keycap-tags-container");
keycapTagsContainer.style.color = "white";
</script> -->
